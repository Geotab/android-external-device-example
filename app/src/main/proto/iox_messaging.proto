/*****************************************************************************
 *
 * Copyright (C) 2023, Geotab Inc.
 *
 ******************************************************************************
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *****************************************************************************/

/******************************************************************************
Revision  Date        Author  Notes
0.1       2023-04-05  YL      Initial draft
0.2       2023-04-24  YL      Fix gps_time field number, rename Publish fields
0.3       2023-05-03  YL      Add clear_subs_ack
0.4       2023-07-14  NT      Add comments
*****************************************************************************/

syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
package com.geotab.ioxproto;
/**
 * This Proto file defines message payloads for the Third party Message Type 0x8C (Protobuf Data Packet from IOX to GO) and Message Type 0x26 (Protobuf Data Packet from GO to IOX).
 * The protobufs defined here follows a simple pub/sub protocol, where a third party IOX device can subscribe to one of the supported TOPICs (enum Topic) 
 * and receive the desired information from the GO.
 * The appropriate master switch needs to be set to use the pub/sub functionality correctly.
 *
 * The list of some of the (unordered) messages and their use is as mentioned below.
 * 1. To get a list of all the subscribable topics: The external device needs to send an IoxToGo message with the pub_sub.list_avail_topics field set.
 *      The GO device responds with an IoxFromGo message with the pub_sub.topic_info_list field.
 *
 * 2. To subscribe to a topic: The external device needs to send an IoxToGo message with the pub_sub.sub field set. 
 *      The Go device responds with an IoxFromGo message with the pub_sub.sub_ack.result field containing 'SUB_ACK_RESULT_SUCCESS'.
 * 
 * 3. To get a list of subscribed topics: The external device needs to send a IoxToGo message with the pub_sub.msg.list_subs field set. 
 *      The GO device responds with an IoxFromGo message with the pub_sub.topic_list field.
 *
 * 4. How the external device gets published information for subscribed topics: 
 *      When there is an update to a subscribed topic, the GO device sends the update in an IoxFromGo message with the pub_sub.pub field set.
 *
 * 5. To remove a topic from the subscription: The external device needs to send a IoxToGo message with the pub_sub.msg.unsub field set. 
 *      The Go device responds with an IoxFromGo message with the pub_sub.sub_ack.result field containing a 'SUB_ACK_RESULT_SUCCESS'.
 *
 * 6. To clear the entire subscription list: The external device needs to send a IoxToGo message with the pub_sub.msg.clear_subs field set.
 *      The Go device responds with an IoxFromGo message with the pub_sub.clear_subs_ack.result field containing a 'CLEAR_SUBS_ACK_RESULT_SUCCESS'.
 *
 * Note: The an IoxFromGo message with the pub_sub.sub_ack.result field or the pub_sub.clear_subs_ack.result field can contain the source 
 *      of error when the request cannot be performed successfully.
 *
 * Note: The subscription is cleared if the GO or the IOX has lost power or if the IOX is disconnected from the GO device.
 * 
 * Note, If the master switch is not enabled:
 *          - An IOX will not able to subscribe any topic.
 *          - The list of subscribable topics will be empty.
 *
 *
 *Example Message from IOX to GO:
 *     0x8C is a message type sent from an external device to GO, to either subscribe or to get a list of topics or to get a list of subscribed topics etc. 
 *     The payload of the 0x8C message is the Pub/Sub message, encoded with Protobuf using nanopb.
 *     An example usage of the 0x8C message to subscribe to one of the topics like TOPIC_ACCEL is as described below.
 * 
 *     0x8C fields values: 
 *         STX=0x02, MessageId = 0x8C, Data payload: Protobuf encoding for message IoxToGo (detailed below), ETX=0x03
 *
 *     IoxToGo message = { 
 *              .which_msg = IoxToGo_pub_sub_tag, 
 *              .pub_sub = { .which_msg = PubSubToGo_sub_tag, .sub = { .topic = TOPIC_ACCEL }}
 *     };
 *     IoxToGo message = { .which_msg = 0x01, .pub_sub = { .which_msg = 0x01, .sub = { .topic = 0x01 }}};
 *
 *     So, IoxToGo message, i.e. Data Payload, after Protobuf encoding: {0x0A 0x04 0x0A 0x02 0x08 0x01}
 *          This leads to, IoxToGo message length after Protobuf encoding: 0x06
 *          Checksum calculation from (0x02 0x8C 0x06, 0x0A 0x04 0x0A 0x02 0x08 0x01) = (0xB7 0x28)
 *          The result Data Payload = (0x06 0x0A 0x04 0x0A 0x02 0x08 0x01 0xB7 0x28)
 * 
 *     So, the final byte stream that the external device would send to GO, in order to subscribe for the TOPIC_ACCEL should be: 
 *          <0x02 0x8C 0x06 0x0A 0x04 0x0A 0x02 0x08 0x01 0xB7 0x28 0x03>
 * 
 *
 * Example Response/Event from GO to IOX:
 *     0x26 is a message type sent from GO to an external device, to either acknowledge a subscription request or other request sent from the external device.
 * 
 *     An example usage of the 0x26 message is to acknowledge a request to subscribe to a topic such as TOPIC_ACCEL, the message is described as below.
 * 
 *     The external device will receive a 0x26 message from the GO device such as:
 *         (0x02 0x26 0x08 0x0A 0x06 0x0A 0x04 0x08 0x01 0x10 0x01 0x68 0xE8 0x03)
 * 
 *     The extracted IoxFromGo message with Protobuf encoding = (0x0A 0x06 0x0A 0x04 0x08 0x01 0x10 0x01)
 *     The IoxFromGo message after decoding = {
 *          .which_msg = 0x01, 
 *          .pub_sub = {
 *               .which_msg = 0x01, 
 *               .suback = { .result = 0x01, .topic = 0x01 }
 *          }
 *      }
 * 
 *     The IoxFromGo message can be interpreted as { 
 *          .which_msg = IoxFromGo_pub_sub_tag, 
 *          .pub_sub = {
 *              .which_msg = PubSubFromGo_sub_ack_tag, 
 *              .suback = { .result = SubAck_SUB_ACK_RESULT_SUCCESS, .topic = TOPIC_ACCEL }
 *          }
 *     } 
 */

// The ID of all the subscribable topics.
// @exclude Includes status data IDs
// @exclude The comment is CSV format: 1st field is the type, 2nd field is the unit, 3rd field is the extra information (if any).
enum Topic {
    TOPIC_UNSPECIFIED = 0;              // Invalid topic,, (DO NOT USE)
    TOPIC_ACCEL = 1;                    // Vec3, m/s^2, To be implemented
    TOPIC_GPS = 2;                      // Gps, Lat/Long: degrees. speed: km/h, To be implemented
    TOPIC_BATTERY_VOLTAGE = 3;          // float, Volt, To be implemented
    TOPIC_VIN = 4;                      // String, Unitless
    TOPIC_GEAR = 5;             // 32 bit signed int, Unitless, -1=Reverse. 0=Neutral. 1-8:Nth gear. 126=Park. 127=Drive. 129=Intermediate. 130=Unknown. 
    TOPIC_ENGINE_SPEED = 6;             // 32 bit float, RPM
    TOPIC_ENGINE_LOAD = 7;              // 32 bit float, %
    TOPIC_ODOMETER = 8;                 // 32 bit float, km
    TOPIC_ACCEL_PEDAL_PERCENTAGE = 9;   // 32 bit float, %
    TOPIC_COOLANT_TEMP = 10;            // 32 bit float, degC
    TOPIC_DOC_INTAKE_GAS_TEMP = 11;     // 32 bit float, degC
    TOPIC_DOC_OUTLET_GAS_TEMP = 12;     // 32 bit float, degC
    TOPIC_FUELTANK1_UNITS = 13;         // 32 bit float, Litres
    TOPIC_FUELTANK2_UNITS = 14;         // 32 bit float, Litres
    TOPIC_FUELTANK1_PERCENT = 15;       // 32 bit float, %
    TOPIC_FUELTANK2_PERCENT = 16;       // 32 bit float, %
    TOPIC_STATE_OF_CHARGE = 17;         // 32 bit float, %
    TOPIC_ENGINE_ROAD_SPEED = 18;       // 32 bit float, km/h
    TOPIC_VEHICLE_ACTIVE = 19;          // 32 bit signed int, Unitless, 0=Ignition Off. 1=Ignition On.
    TOPIC_DRIVER_SEATBELT = 20;         // 32 bit signed int, Unitless, 0=Buckled. 1=Unbuckled.
    TOPIC_LEFT_TURN_SIGNAL = 21;        // 32 bit signed int, Unitless, 0=Off. 1=On
    TOPIC_RIGHT_TURN_SIGNAL = 22;       // 32 bit signed int, Unitless, 0=Off. 1=On
    TOPIC_EV_CHARGING_STATE = 23;       // 32 bit signed int, Unitless, 0=Not Charging. 1=AC charging. 2=DC charging.
    TOPIC_PARK_BRAKE = 24;              // 32 bit signed int, Unitless, 0=Off. 1=On. 2=Error.
}

/**
 * GO to IOX: 3nd level of a IoxFromGo message.
 * This structure contains a response to a Subscribe request or an Unsubscribe request.
 */
message SubAck {
    // Possible result returned from a Subscribe request or an Unsubscribe request.
    enum Result {
        // Not used; zero is never returned as a Result.
        SUB_ACK_RESULT_UNSPECIFIED = 0;
        // Subscription success
        SUB_ACK_RESULT_SUCCESS = 1;
        // Generic subscription failure
        SUB_ACK_RESULT_FAILED = 2;
        // Subscribe fails if an unknown topic is specified
        SUB_ACK_RESULT_UNKNOWN_TOPIC = 3;
        // Subscribe fails if the topic has already been subscribed to
        SUB_ACK_RESULT_TOPIC_ALREADY_SUBBED = 4;
        // Unsubscribe fails if the topic has not been subscribed to
        SUB_ACK_RESULT_TOPIC_NOT_SUBBED = 5;
        // Unsubscribe fails if the subscription belongs to another IOX.
        SUB_ACK_RESULT_UNAVAILABLE = 6;
        // IOX Pub/Sub is not enabled by Master Switch.
        SUB_ACK_RESULT_DISABLED = 7;
    }
    Result result = 1;      // The result of a subscribe request or an unsubscribe request.
    Topic topic = 2;        // The topic specified in the request.
}

/**
 * GO to IOX: 
 * This is part of the response to the Subscribable list request message.
 * This structure contains the information of one subscribable topics.
 */
message TopicInfo {
    // @exclude May be extended with metadata for each topic in the future.
    Topic topic = 1;        // The ID of the subscribable topic.
}

/**
 * GO to IOX: 3rd level of an IoxFromGo message. 
 * This is a response to the Subscribed list request message.
 * This structure provides the list of all the subscribed topics.
 */
message TopicList {
    // An array of topics.
    repeated Topic topics = 1;  // array of IDs, each from a subscribed topic.
}

/**
 * GO to IOX: 3rd level of an IoxFromGo message. 
 * This is a response to the Subscribable list request message.
 * This structure contains the information of all subscribable topics.
 */
message TopicInfoList {
    repeated TopicInfo topics = 1;  // array of topic information, each from a subscribable topic.
}

/**
 * GO to IOX: 3rd level of an IoxFromGo message. 
 * This is a response to a Clear subscription request.
 */
 message ClearSubsAck {
    // Possible result of a Clear subscription request.
    enum Result {
        // Not used. ClearSubAck will never return a result = zero.
        CLEAR_SUBS_ACK_RESULT_UNSPECIFIED = 0;
        // Clear subscription succeeded
        CLEAR_SUBS_ACK_RESULT_SUCCESS = 1;
        // Clear subscription failed: The subscription is owned by another IOX.
        CLEAR_SUBS_ACK_RESULT_UNAVAILABLE = 2;
        // Clear subscription failed: Pub/Sub is not enabled by Master Switch.
        CLEAR_SUBS_ACK_RESULT_DISABLED = 3;
    }
    Result result = 1;  // This is the result of a Clear subscription request.
}

/**
 * GO to IOX:
 * This structure is used for publishing the output of the accelerometer.
 */
 message Vec3 {
    float x = 1;    // Output of the X-axis.
    float y = 2;    // Output of the Y-axis.
    float z = 3;    // Output of the Z-axis.
}

/**
 * GO to IOX:
 * This structure is used for publishing the output of the GPS.
 */
message Gps {
    // Latitude, in degrees (+ve = north, -ve = south)
    float latitude = 1;
    // Longitude, in degrees (+ve = east, -ve = west)
    float longitude = 2;
    // Speed, in km/h
    float speed = 3;
    // Heading, in degrees
    float heading = 4;
    // Time the GPS data is sampled.
    google.protobuf.Timestamp gps_time = 5;
}

/**
 * GO to IOX: 3nd level of an IoxFromGo message.
 * The Go device sends this message for each subscribed topic when an update to the status of the topic is available.
 */
message Publish {
    google.protobuf.Timestamp time = 1;     // Time since 1970-01-01 00:00:00 UTC.
    Topic topic = 2;                        // ID of the subscribed topic this message contains.
    // The updated value of the topic.
    oneof value {
        bool bool_value = 3;
        int32 int_value = 4;
        uint32 uint_value = 5;
        float float_value = 6;
        // Used for VIN (17 digits)
        string string_value = 7;
        // Used for acceleration
        Vec3 vec3_value = 8;
        // Used for GPS output.
        Gps gps_value = 9;
    };
}

/**
 * IOX to GO: 3rd level of an IoxToGo message.
 * Subscribe request: An external device sends this message to subscribe an available topic.
 */
message Subscribe {
    Topic topic = 1;        // ID of the topic the IOX wishes to subscribe.
}

/**
 * IOX to GO: 3rd level of an IoxToGo message.
 * Unsubscribe request: An external device sends this message to unsubscribe a topic.
 */
message Unsubscribe {
    Topic topic = 1;        // ID of a subscribed topic, the IOX wishes to removed.
}

/**
 * IOX to GO: 2nd level of an IoxToGo message.
 * This level identifies the type of requests to the subscription.
 */
message PubSubToGo {
    // Possible type of requests.
    oneof msg {
        // Subscribe request: Add a topic to the subscription.
        Subscribe sub = 1;
        // Unsubscribe request: Remove the topic from the subscription.
        Unsubscribe unsub = 2;
        // Subscribed list request: gps_time all subscribed topics.
        google.protobuf.Empty list_subs = 3;
        // Clear subscription request: Clear all the subscribed topics from the subscription.
        google.protobuf.Empty clear_subs = 4;
        // Subscribable list request: Get the list of all subscribable topics.
        google.protobuf.Empty list_avail_topics = 5;
    }
}

/**
 * GO to IOX: 2nd level of an IoxFromGo message.
 * This level identifies the type of information/response.
 */
message PubSubFromGo {
    // Possible type of information/response the GO device sends to an external device.
    oneof msg {
        // Reply to sub and unsub, indicating success/failure
        SubAck sub_ack = 1;
        // Reply to list_subs, containing all subscribed topics
        TopicList topic_list = 2;
        // Reply to list_avail_topics, containing info on all supported topics
        TopicInfoList topic_info_list = 3;
        // Data sample published by the GO
        Publish pub = 4;
        // Reply to clear_subs, indicating success/failure
        ClearSubsAck clear_subs_ack = 5;
    }
}

/**
 * IOX to GO: Top level of a pub/sub message.
 * An IoxToGo message can only contain one PubSubToGo message.
 */
message IoxToGo {
    oneof msg {
        PubSubToGo pub_sub = 1;
    }
}

/**
 * GO to IOX: Top level of a pub/sub message.
 * An IoxFromGo message can only contain one PubSubFromGo message.
 */
message IoxFromGo {
    oneof msg {
        PubSubFromGo pub_sub = 1;
    }
}
